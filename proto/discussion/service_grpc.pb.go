// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package discussion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscussionServiceClient is the client API for DiscussionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscussionServiceClient interface {
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
}

type discussionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscussionServiceClient(cc grpc.ClientConnInterface) DiscussionServiceClient {
	return &discussionServiceClient{cc}
}

func (c *discussionServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, "/myblog.proto.discussion.DiscussionService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscussionServiceServer is the server API for DiscussionService service.
// All implementations must embed UnimplementedDiscussionServiceServer
// for forward compatibility
type DiscussionServiceServer interface {
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	mustEmbedUnimplementedDiscussionServiceServer()
}

// UnimplementedDiscussionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiscussionServiceServer struct {
}

func (UnimplementedDiscussionServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedDiscussionServiceServer) mustEmbedUnimplementedDiscussionServiceServer() {}

// UnsafeDiscussionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscussionServiceServer will
// result in compilation errors.
type UnsafeDiscussionServiceServer interface {
	mustEmbedUnimplementedDiscussionServiceServer()
}

func RegisterDiscussionServiceServer(s grpc.ServiceRegistrar, srv DiscussionServiceServer) {
	s.RegisterService(&DiscussionService_ServiceDesc, srv)
}

func _DiscussionService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscussionServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myblog.proto.discussion.DiscussionService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscussionServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscussionService_ServiceDesc is the grpc.ServiceDesc for DiscussionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscussionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myblog.proto.discussion.DiscussionService",
	HandlerType: (*DiscussionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _DiscussionService_CreateComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/discussion/service.proto",
}
