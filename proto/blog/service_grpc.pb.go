// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package blog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlogServiceClient is the client API for BlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogServiceClient interface {
	ListCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	ListPublishedPosts(ctx context.Context, in *ListPublishedPostsRequest, opts ...grpc.CallOption) (*ListPublishedPostsResponse, error)
	ListTaxonomyPublishedPosts(ctx context.Context, in *ListTaxonomyPublishedPostsRequest, opts ...grpc.CallOption) (*ListTaxonomyPublishedPostsResponse, error)
}

type blogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogServiceClient(cc grpc.ClientConnInterface) BlogServiceClient {
	return &blogServiceClient{cc}
}

func (c *blogServiceClient) ListCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, "/myblog.proto.blog.BlogService/ListCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) ListPublishedPosts(ctx context.Context, in *ListPublishedPostsRequest, opts ...grpc.CallOption) (*ListPublishedPostsResponse, error) {
	out := new(ListPublishedPostsResponse)
	err := c.cc.Invoke(ctx, "/myblog.proto.blog.BlogService/ListPublishedPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) ListTaxonomyPublishedPosts(ctx context.Context, in *ListTaxonomyPublishedPostsRequest, opts ...grpc.CallOption) (*ListTaxonomyPublishedPostsResponse, error) {
	out := new(ListTaxonomyPublishedPostsResponse)
	err := c.cc.Invoke(ctx, "/myblog.proto.blog.BlogService/ListTaxonomyPublishedPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogServiceServer is the server API for BlogService service.
// All implementations must embed UnimplementedBlogServiceServer
// for forward compatibility
type BlogServiceServer interface {
	ListCategories(context.Context, *emptypb.Empty) (*ListCategoriesResponse, error)
	ListPublishedPosts(context.Context, *ListPublishedPostsRequest) (*ListPublishedPostsResponse, error)
	ListTaxonomyPublishedPosts(context.Context, *ListTaxonomyPublishedPostsRequest) (*ListTaxonomyPublishedPostsResponse, error)
	mustEmbedUnimplementedBlogServiceServer()
}

// UnimplementedBlogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlogServiceServer struct {
}

func (UnimplementedBlogServiceServer) ListCategories(context.Context, *emptypb.Empty) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedBlogServiceServer) ListPublishedPosts(context.Context, *ListPublishedPostsRequest) (*ListPublishedPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublishedPosts not implemented")
}
func (UnimplementedBlogServiceServer) ListTaxonomyPublishedPosts(context.Context, *ListTaxonomyPublishedPostsRequest) (*ListTaxonomyPublishedPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaxonomyPublishedPosts not implemented")
}
func (UnimplementedBlogServiceServer) mustEmbedUnimplementedBlogServiceServer() {}

// UnsafeBlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServiceServer will
// result in compilation errors.
type UnsafeBlogServiceServer interface {
	mustEmbedUnimplementedBlogServiceServer()
}

func RegisterBlogServiceServer(s grpc.ServiceRegistrar, srv BlogServiceServer) {
	s.RegisterService(&BlogService_ServiceDesc, srv)
}

func _BlogService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myblog.proto.blog.BlogService/ListCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ListCategories(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_ListPublishedPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublishedPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ListPublishedPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myblog.proto.blog.BlogService/ListPublishedPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ListPublishedPosts(ctx, req.(*ListPublishedPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_ListTaxonomyPublishedPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaxonomyPublishedPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ListTaxonomyPublishedPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myblog.proto.blog.BlogService/ListTaxonomyPublishedPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ListTaxonomyPublishedPosts(ctx, req.(*ListTaxonomyPublishedPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogService_ServiceDesc is the grpc.ServiceDesc for BlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myblog.proto.blog.BlogService",
	HandlerType: (*BlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCategories",
			Handler:    _BlogService_ListCategories_Handler,
		},
		{
			MethodName: "ListPublishedPosts",
			Handler:    _BlogService_ListPublishedPosts_Handler,
		},
		{
			MethodName: "ListTaxonomyPublishedPosts",
			Handler:    _BlogService_ListTaxonomyPublishedPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/blog/service.proto",
}
